// Define the mapping of characters to Unicode bold, italic, and underline
const boldMap = {
  A: "ùóî",
  B: "ùóï",
  C: "ùóñ",
  D: "ùóó",
  E: "ùóò",
  F: "ùóô",
  G: "ùóö",
  H: "ùóõ",
  I: "ùóú",
  J: "ùóù",
  K: "ùóû",
  L: "ùóü",
  M: "ùó†",
  N: "ùó°",
  O: "ùó¢",
  P: "ùó£",
  Q: "ùó§",
  R: "ùó•",
  S: "ùó¶",
  T: "ùóß",
  U: "ùó®",
  V: "ùó©",
  W: "ùó™",
  X: "ùó´",
  Y: "ùó¨",
  Z: "ùó≠",
  a: "ùóÆ",
  b: "ùóØ",
  c: "ùó∞",
  d: "ùó±",
  e: "ùó≤",
  f: "ùó≥",
  g: "ùó¥",
  h: "ùóµ",
  i: "ùó∂",
  j: "ùó∑",
  k: "ùó∏",
  l: "ùóπ",
  m: "ùó∫",
  n: "ùóª",
  o: "ùóº",
  p: "ùóΩ",
  q: "ùóæ",
  r: "ùóø",
  s: "ùòÄ",
  t: "ùòÅ",
  u: "ùòÇ",
  v: "ùòÉ",
  w: "ùòÑ",
  x: "ùòÖ",
  y: "ùòÜ",
  z: "ùòá",
  "0": "ùü¨",
  "1": "ùü≠",
  "2": "ùüÆ",
  "3": "ùüØ",
  "4": "ùü∞",
  "5": "ùü±",
  "6": "ùü≤",
  "7": "ùü≥",
  "8": "ùü¥",
  "9": "ùüµ",
};

const italicMap = {
  A: "ùòà",
  B: "ùòâ",
  C: "ùòä",
  D: "ùòã",
  E: "ùòå",
  F: "ùòç",
  G: "ùòé",
  H: "ùòè",
  I: "ùòê",
  J: "ùòë",
  K: "ùòí",
  L: "ùòì",
  M: "ùòî",
  N: "ùòï",
  O: "ùòñ",
  P: "ùòó",
  Q: "ùòò",
  R: "ùòô",
  S: "ùòö",
  T: "ùòõ",
  U: "ùòú",
  V: "ùòù",
  W: "ùòû",
  X: "ùòü",
  Y: "ùò†",
  Z: "ùò°",
  a: "ùëé",
  b: "ùëè",
  c: "ùëê",
  d: "ùëë",
  e: "ùëí",
  f: "ùëì",
  g: "ùëî",
  h: "ùò©",
  i: "ùëñ",
  j: "ùëó",
  k: "ùëò",
  l: "ùëô",
  m: "ùòÆ",
  n: "ùëõ",
  o: "ùëú",
  p: "ùëù",
  q: "ùëû",
  r: "ùëü",
  s: "ùë†",
  t: "ùë°",
  u: "ùë¢",
  v: "ùë£",
  w: "ùë§",
  x: "ùë•",
  y: "ùë¶",
  z: "ùëß",
  "0": "ùüé",
  "1": "ùüè",
  "2": "ùüê",
  "3": "ùüë",
  "4": "ùüí",
  "5": "ùüì",
  "6": "ùüñ",
  "7": "ùüï",
  "8": "ùüñ",
  "9": "ùüó",
  " ": " ",
};

// Underline mapping function using combining low line character (U+0332)
function toUnderlineUnicode(text: string) {
  return text
    .split("")
    .map((char) => char + "\u0332")
    .join("");
}

// Function to convert text to bold Unicode with type guard
function toBoldUnicode(text: string): string {
  return text
    .split("")
    .map((char) =>
      char in boldMap ? boldMap[char as keyof typeof boldMap] : char
    )
    .join("");
}

// Function to convert text to italic Unicode with type guard
function toItalicUnicode(text: string): string {
  return text
    .split("")
    .map((char) =>
      char in italicMap ? italicMap[char as keyof typeof italicMap] : char
    )
    .join("");
}

// Function to convert HTML to Unicode, handling specific tags and child list indentation
function htmlToUnicode(html: string) {
  const tempElement = document.createElement("div");
  tempElement.innerHTML = html;

  function traverseNode(node: any, listLevel = 0) {
    let result = "";

    if (node.nodeType === Node.TEXT_NODE) {
      result = node.textContent || "";
    } else if (node.nodeType === Node.ELEMENT_NODE) {
      const element = node;

      if (element.tagName === "STRONG" || element.tagName === "B") {
        result += toBoldUnicode(
          Array.from(element.childNodes).map(traverseNode).join("")
        );
      } else if (element.tagName === "EM") {
        result += toItalicUnicode(
          Array.from(element.childNodes).map(traverseNode).join("")
        );
      } else if (element.tagName === "U") {
        result += toUnderlineUnicode(
          Array.from(element.childNodes).map(traverseNode).join("")
        );
      } else if (element.tagName === "P") {
        result +=
          Array.from(element.childNodes).map(traverseNode).join("") + "\n";
      } else if (element.tagName === "UL") {
        result +=
          "\n" +
          Array.from(element.childNodes)
            .map((child) => "‚Ä¢ " + traverseNode(child, listLevel + 1))
            .join("\n") +
          "\n";
      } else if (element.tagName === "OL") {
        let counter = 1;
        result +=
          "\n" +
          Array.from(element.childNodes)
            .map(
              (child) => `${counter++}. ${traverseNode(child, listLevel + 1)}`
            )
            .join("\n") +
          "\n";
      } else if (element.tagName === "LI") {
        // Indent child lists based on nesting level
        const indentation = "  ".repeat(listLevel);
        result += indentation + Array.from(element.childNodes).map(traverseNode).join("") + "\n"; // Add line break after each <li>
      } else {
        result += Array.from(element.childNodes).map(traverseNode).join("");
      }
    }

    return result;
  }

  return traverseNode(tempElement).trim();
}



// Example usage
// const normalHtml = `<p>üñãÔ∏è <em>Ever felt the power of words?</em></p><p>Just like a good outfit needs the right accessories, great writing requires the right emphasis! üöÄ</p><ul><li>‚ú® <strong>Bold</strong>: Grab attention!</li><li>‚ú® <em>Italic</em>: Add finesse.</li><li>‚ú® <u>Underline</u>: Highlight info.</li></ul>`;
// const unicodeHtml = htmlToUnicode(normalHtml);
// console.log(unicodeHtml);

// Export the function
export { htmlToUnicode };
